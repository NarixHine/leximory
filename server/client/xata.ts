// Generated by Xata Codegen 0.26.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "libraries",
    columns: [
      { name: "lang", type: "string", notNull: true, defaultValue: "en" },
      { name: "owner", type: "string", notNull: true, defaultValue: "" },
      { name: "name", type: "string", notNull: true, defaultValue: "新文库" },
      { name: "starredBy", type: "multiple" },
      { name: "access", type: "int", notNull: true, defaultValue: "0" },
      { name: "org", type: "string" },
      { name: "shadow", type: "bool", notNull: true, defaultValue: "false" },
      { name: "price", type: "int", notNull: true, defaultValue: "10" },
    ],
    revLinks: [
      { column: "lib", table: "lexicon" },
      { column: "lib", table: "texts" },
      { column: "lib", table: "audio" },
    ],
  },
  {
    name: "lexicon",
    columns: [
      { name: "lib", type: "link", link: { table: "libraries" } },
      { name: "word", type: "string", notNull: true, defaultValue: "" },
      { name: "day", type: "datetime", notNull: true, defaultValue: "now" },
    ],
  },
  {
    name: "texts",
    columns: [
      { name: "content", type: "text", notNull: true, defaultValue: "" },
      { name: "lib", type: "link", link: { table: "libraries" } },
      { name: "title", type: "string", notNull: true, defaultValue: "新文本" },
      { name: "topics", type: "multiple" },
      { name: "ebook", type: "file", file: { defaultPublicAccess: true } },
    ],
  },
  {
    name: "audio",
    columns: [
      { name: "lib", type: "link", link: { table: "libraries" } },
      { name: "gen", type: "file" },
    ],
  },
  {
    name: "subs",
    columns: [
      { name: "uid", type: "string", unique: true },
      { name: "subscription", type: "json", notNull: true, defaultValue: "{}" },
      { name: "hour", type: "int", notNull: true, defaultValue: "22" },
    ],
  },
  {
    name: "users",
    columns: [
      { name: "lexicoin", type: "int", notNull: true, defaultValue: "20" },
      { name: "accent", type: "text", notNull: true, defaultValue: "AmE" },
      { name: "last_daily_claim", type: "datetime" },
      { name: "archived_libs", type: "multiple" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Libraries = InferredTypes["libraries"];
export type LibrariesRecord = Libraries & XataRecord;

export type Lexicon = InferredTypes["lexicon"];
export type LexiconRecord = Lexicon & XataRecord;

export type Texts = InferredTypes["texts"];
export type TextsRecord = Texts & XataRecord;

export type Audio = InferredTypes["audio"];
export type AudioRecord = Audio & XataRecord;

export type Subs = InferredTypes["subs"];
export type SubsRecord = Subs & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  libraries: LibrariesRecord;
  lexicon: LexiconRecord;
  texts: TextsRecord;
  audio: AudioRecord;
  subs: SubsRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://INK-ai3lvl.us-east-1.xata.sh/db/leximory",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
